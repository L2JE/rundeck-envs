# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  ######################################
  #### BASIC SERVER SETUP
  ######################################    
  RUNDECK_PKG="rundeckpro-enterprise-4.3.1-20220615.war"
  INSTANCE_IP="192.168.56.21"
  INSTANCE_PORT="4440"
  DB_URL_STRING="" #If not empty, must set all DB_* variables
  DB_DRIVER="org.h2.Driver"
  DB_DRIVER_DOWNLOAD_URL=""
  DB_USER="sa"
  DB_PASS=""
  
  ######################################
  #### VM SETUP
  ######################################
  required_plugins = %w(winrm winrm-fs winrm-elevated)

  plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
  
  if not plugins_to_install.empty?
    puts "Installing plugins: #{plugins_to_install.join(' ')}"
    if system "vagrant plugin install #{plugins_to_install.join(' ')}"
      exec "vagrant #{ARGV.join(' ')}"
    else
      abort "Installation of one or more plugins has failed. Aborting."
    end
  end  
  
  config.vm.box = "gusztavvargadr/windows-server" # From https://app.vagrantup.com/gusztavvargadr
  config.vm.box_version = "1809.0.2112" # Windows Server 2019 Standard Desktop

  config.vm.network "private_network", ip: INSTANCE_IP

  ######################################
  #### CUSTOM SERVER PROPERTIES SETUP
  ######################################
  CONFIG_PROPS = getProperties("rundeck-config.properties") #Will merge with instance's rundeck-config.properties
  FRAMEWORK_PROPS = getProperties("framework.properties") #Will merge with instance's framework.properties

  config.vm.provision "shell", privileged: "true", powershell_elevated_interactive: "true", inline: <<-SHELL
    function SetUpServerIp {
      Write-Host "Setting up server Ip..."
      (Get-Content $RDECK_BASE\\server\\config\\rundeck-config.properties) -Replace('grails.serverURL=.*',"grails.serverURL=http://${instanceIp}:${instancePort}") | Set-Content $RDECK_BASE\\server\\config\\rundeck-config.properties
      (Get-Content $RDECK_BASE\\server\\config\\rundeck-config.properties) -Replace('server.address=.*',"server.address=${instanceIp}") | Set-Content $RDECK_BASE\\server\\config\\rundeck-config.properties
      (Get-Content $RDECK_BASE\\server\\config\\rundeck-config.properties) -Replace('server.port=.*',"server.port=${instancePort}") | Set-Content $RDECK_BASE\\server\\config\\rundeck-config.properties
      (Get-Content $RDECK_BASE\\etc\\framework.properties) -Replace('framework.server.name.*=.*',"framework.server.name=${instanceIp}") | Set-Content $RDECK_BASE\\etc\\framework.properties
      (Get-Content $RDECK_BASE\\etc\\framework.properties) -Replace('framework.server.hostname.*=.*',"framework.server.hostname=${instanceIp}") | Set-Content $RDECK_BASE\\etc\\framework.properties
      (Get-Content $RDECK_BASE\\etc\\framework.properties) -Replace('framework.server.port.*=.*',"framework.server.port=${instancePort}") | Set-Content $RDECK_BASE\\etc\\framework.properties
      (Get-Content $RDECK_BASE\\etc\\framework.properties) -Replace('framework.server.url.*=.*',"framework.server.url=http://${instanceIp}:${instancePort}") | Set-Content $RDECK_BASE\\etc\\framework.properties
    }

    function SetUpServerDB {
      Write-Host "Setting up DB configuration..."
      $clientFileName = $dbDriver.replace(".","-")
      Invoke-WebRequest -Uri $dbDriverUrl -OutFile ${RDECK_BASE}\\config\\lib\\${clientFileName}.jar

      (Get-Content $RDECK_BASE\\server\\config\\rundeck-config.properties) -Replace('dataSource.url=.*',"dataSource.url=${dbUrlString}") | Set-Content $RDECK_BASE\\server\\config\\rundeck-config.properties
      Add-Content $RDECK_BASE\\server\\config\\rundeck-config.properties "`ndataSource.driverClassName=${dbDriver}"
      Add-Content $RDECK_BASE\\server\\config\\rundeck-config.properties "`ndataSource.username=${dbUser}"
      Add-Content $RDECK_BASE\\server\\config\\rundeck-config.properties "`ndataSource.password=${dbPass}"
    }

    function SetUpConfigProps {
      $propValues = @(#{CONFIG_PROPS[0].map{ |prop| "\"" + prop + "\""}.join(",")})
      $propKeys = @(#{CONFIG_PROPS[1].map{ |prop| "\"" + prop + "\""}.join(",")})
      $configFileContent = Get-Content $RDECK_BASE\\server\\config\\rundeck-config.properties

      for ($idx = 0; $idx -lt $propValues.count; $idx++){
          $prop = $propValues[$idx]
          $val = $propKeys[$idx]

          if ( $configFileContent -like "${prop}*"){
            $configFileContent = $configFileContent -Replace("${prop}=.*","${prop}=${val}")
          } else{
            $configFileContent = $configFileContent + "`n${prop}=${val}"
          }
      }
      $configFileContent | Set-Content $RDECK_BASE\\server\\config\\rundeck-config.properties
    }
    
    function SetUpFwProps {
      $propValues = @(#{FRAMEWORK_PROPS[0].map{ |prop| "\"" + prop + "\""}.join(",")})
      $propKeys = @(#{FRAMEWORK_PROPS[1].map{ |prop| "\"" + prop + "\""}.join(",")})
      $configFileContent = Get-Content $RDECK_BASE\\etc\\framework.properties

      for ($idx = 0; $idx -lt $propValues.count; $idx++){
          $prop = $propValues[$idx]
          $val = $propKeys[$idx]

          if ( $configFileContent -like "${prop}*"){
            $configFileContent = $configFileContent -Replace("${prop}=.*","${prop}=${val}")
          } else{
            $configFileContent = $configFileContent + "`n${prop}=${val}"
          }
      }
      $configFileContent | Set-Content $RDECK_BASE\\etc\\framework.properties
    }
  
    $rdeckPkg="#{RUNDECK_PKG}"
    $instanceIp="#{INSTANCE_IP}"
    $instancePort="#{INSTANCE_PORT}"
    $dbUrlString="#{DB_URL_STRING}"
    $dbDriver="#{DB_DRIVER}"
    $dbDriverUrl="#{DB_DRIVER_DOWNLOAD_URL}"
    $dbUser="#{DB_USER}"
    $dbPass="#{DB_PASS}"
    $RDECK_BASE="C:\\rundeck"
    New-NetFirewallRule -DisplayName "ALLOW TCP PORT 4440" -Direction inbound -Profile Any -Action Allow -LocalPort 4440 -Protocol TCP
    Get-NetFirewallRule -DisplayName "ALLOW TCP PORT 4440"
    
    New-NetFirewallRule -DisplayName "ALLOW PING" -Direction inbound -Profile Any -Action Allow -Protocol ICMPv4
    Get-NetFirewallRule -DisplayName "ALLOW PING"
    

    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    choco install openjdk8 -y
    choco install vim -y
    Start-Sleep -Seconds 1.5
    
    
    New-Item -ItemType "directory" -Path "C:\\" -Name "rundeck"
    Write-Host "Downloading $rdeckPkg..."
    Invoke-WebRequest -Uri https://packagecloud.io/pagerduty/rundeckpro/packages/java/com.rundeck.enterprise/$rdeckPkg/artifacts/$rdeckPkg/download -OutFile $RDECK_BASE\\$rdeckPkg

    mkdir $RDECK_BASE\\var
    mkdir $RDECK_BASE\\var\\logs
    $javaPath="$(Get-ChildItem -Path 'C:\\Program Files\\OpenJDK' -Filter 'openjdk-8*' | %{$_.FullName})\\bin\\java.exe"
    $process = Start-Process $javaPath -ArgumentList "-jar $RDECK_BASE\\$rdeckPkg" -RedirectStandardOutput $RDECK_BASE\\var\\logs\\service.log -RedirectStandardError $RDECK_BASE\\var\\logs\\service.error.log -PassThru
    Write-Host "Rundeck first start..."
    Write-Host $process

    powershell -Command {
      param(
        $logFile,
        $expectedString
      )

      Get-Content $logFile -Tail 1 -Wait | ForEach-Object {
        Write-Host $_
        If ($_ -like $expectedString) { 
          break
        }
      }
    } -args "$RDECK_BASE\\var\\logs\\service.log", 'Grails application running at http*'
    
    Write-Host 'Rundeck first start success. Stopping...'
    Stop-Process -id $process.id -Force

    Write-Host "Starting Server Configuration Setup..."
    SetUpServerIp
    SetUpServerDB
    SetUpConfigProps
    SetUpFwProps

    Write-Host "Rundeck Server Configuration set. Starting Rundeck..."
    $process = Start-Process $javaPath -ArgumentList "-jar $RDECK_BASE\\$rdeckPkg" -RedirectStandardOutput $RDECK_BASE\\var\\logs\\service.log -RedirectStandardError $RDECK_BASE\\var\\logs\\service.error.log -PassThru
    
    powershell -Command {
      param(
        $logFile,
        $expectedString
      )

      Get-Content $logFile -Tail 1 -Wait | ForEach-Object {
        Write-Host $_
        If ($_ -like $expectedString) { 
          break
        }
      }
    } -args "$RDECK_BASE\\var\\logs\\service.log", 'Grails application running at http*'
    Write-Host "PACKAGE: ${rundeckPkg}"
    Write-Host "SERVER URL: http://${instanceIp}:${instancePort}"
    Write-Host "Starting Rundeck Process:"
    Write-Host $process
    
  SHELL
end

def getProperties(propertiesFileName)
  propKeys = Array.new
  propValues = Array.new

  if File.file?(propertiesFileName)
        file = File.open(propertiesFileName)
        props = file.read.gsub(/(^#.+)/, '').each_line.filter_map { |line| line.split('=',2) if !line.match /^$/ }
  
        props.each { |prop| 
            propKeys.push(prop[0].chomp)
            propValues.push(prop[1].chomp)
        }
  end
  [propKeys, propValues]
end