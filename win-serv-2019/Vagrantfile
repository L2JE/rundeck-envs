# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  
  required_plugins = %w(winrm winrm-fs winrm-elevated)

  plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
  
  if not plugins_to_install.empty?
    puts "Installing plugins: #{plugins_to_install.join(' ')}"
    if system "vagrant plugin install #{plugins_to_install.join(' ')}"
      exec "vagrant #{ARGV.join(' ')}"
    else
      abort "Installation of one or more plugins has failed. Aborting."
    end
  end  
  
  config.vm.box = "gusztavvargadr/windows-server"
  config.vm.box_version = "1809.0.2112" # Windows Server 2019 Standard Desktop

  #config.vm.network "forwarded_port", guest: 4440, host: 4440
  #config.vm.network "private_network", ip: "192.168.33.10"

  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "./data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.provision "shell", privileged: "true", powershell_elevated_interactive: "true", inline: <<-SHELL
    #$RDECK_BASE="C:\\rundeck"
    $ruleName = "ALLOW TCP PORT 22"
    New-NetFirewallRule -DisplayName "$ruleName" -Direction inbound -Profile Any -Action Allow -LocalPort 22 -Protocol TCP
    Get-NetFirewallRule -DisplayName $ruleName

    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    #choco install openjdk8 -y
    #$env:Path += "C:\\Program Files\\OpenJDK\\openjdk-8u322-b06\\bin;"
    
    #$rdeckPkg="rundeckpro-enterprise-4.0.0-20220322.war"
    #$ipAddr=0.0.0.0

    #New-Item -ItemType "directory" -Path "C:\\" -Name "rundeck"
    #Install chrome
    #$LocalTempDir = $env:TEMP; $ChromeInstaller = "ChromeInstaller.exe"; (new-object    System.Net.WebClient).DownloadFile('http://dl.google.com/chrome/install/375.126/chrome_installer.exe', "$LocalTempDir\$ChromeInstaller"); & "$LocalTempDir\$ChromeInstaller" /silent /install; $Process2Monitor =  "ChromeInstaller"; Do { $ProcessesFound = Get-Process | ?{$Process2Monitor -contains $_.Name} | Select-Object -ExpandProperty Name; If ($ProcessesFound) { "Still running: $($ProcessesFound -join ', ')" | Write-Host; Start-Sleep -Seconds 2 } else { rm "$LocalTempDir\$ChromeInstaller" -ErrorAction SilentlyContinue -Verbose } } Until (!$ProcessesFound)
    #Invoke-WebRequest -Uri https://packagecloud.io/pagerduty/rundeckpro/packages/java/com.rundeck.enterprise/$rdeckPkg/artifacts/$rdeckPkg/download -OutFile $RDECK_BASE\\$rdeckPkg
    #java -jar $RDECK_BASE\\$rdeckPkg --installonly

    #Start-Process java -RedirectStandardOutput "$RDECK_BASE\server\logs\rundeck.log" -RedirectStandardError "$RDECK_BASE\server\log\rundeck.log" -ArgumentList "-jar" "$RDECK_BASE\$rdeckPkg" 



    # can use later the following command to follow the log
    #Get-Content -Path $RDECK_BASE\server\logs\rundeck.log -Tail 10 -Wait
  SHELL
end
